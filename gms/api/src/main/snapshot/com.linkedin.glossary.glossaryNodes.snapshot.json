{
  "models" : [ {
    "type" : "record",
    "name" : "AuditStamp",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.",
    "fields" : [ {
      "name" : "time",
      "type" : {
        "type" : "typeref",
        "name" : "Time",
        "doc" : "Number of milliseconds since midnight, January 1, 1970 UTC. It must be a positive number",
        "ref" : "long"
      },
      "doc" : "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."
    }, {
      "name" : "actor",
      "type" : {
        "type" : "typeref",
        "name" : "Urn",
        "ref" : "string",
        "java" : {
          "class" : "com.linkedin.common.urn.Urn"
        }
      },
      "doc" : "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."
    }, {
      "name" : "impersonator",
      "type" : "Urn",
      "doc" : "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.",
      "optional" : true
    } ]
  }, {
    "type" : "typeref",
    "name" : "GlossaryNodeUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Business Node",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.GlossaryNodeUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized business node identifier",
        "entityType" : "glossaryNode",
        "fields" : [ {
          "doc" : "The name of business node with hierarchy.",
          "name" : "name",
          "type" : "string"
        } ],
        "maxLength" : 56,
        "name" : "GlossaryNode",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, {
    "type" : "record",
    "name" : "Owner",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information",
    "fields" : [ {
      "name" : "owner",
      "type" : "Urn",
      "doc" : "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\n(Caveat: only corpuser is currently supported in the frontend.)",
      "Relationship" : {
        "entityTypes" : [ "corpUser", "corpGroup" ],
        "name" : "OwnedBy"
      },
      "Searchable" : {
        "fieldName" : "owners",
        "fieldType" : "URN",
        "hasValuesFieldName" : "hasOwners",
        "queryByDefault" : false
      }
    }, {
      "name" : "type",
      "type" : {
        "type" : "enum",
        "name" : "OwnershipType",
        "doc" : "Owner category or owner role",
        "symbols" : [ "DEVELOPER", "DATAOWNER", "DELEGATE", "PRODUCER", "CONSUMER", "STAKEHOLDER" ],
        "symbolDocs" : {
          "CONSUMER" : "A person, group, or service that consumes the data",
          "DATAOWNER" : "A person or group that is owning the data",
          "DELEGATE" : "A person or a group that overseas the operation, e.g. a DBA or SRE.",
          "DEVELOPER" : "A person or group that is in charge of developing the code",
          "PRODUCER" : "A person, group, or service that produces/generates the data",
          "STAKEHOLDER" : "A person or a group that has direct business interest"
        }
      },
      "doc" : "The type of the ownership"
    }, {
      "name" : "source",
      "type" : {
        "type" : "record",
        "name" : "OwnershipSource",
        "doc" : "Source/provider of the ownership information",
        "fields" : [ {
          "name" : "type",
          "type" : {
            "type" : "enum",
            "name" : "OwnershipSourceType",
            "symbols" : [ "AUDIT", "DATABASE", "FILE_SYSTEM", "ISSUE_TRACKING_SYSTEM", "MANUAL", "SERVICE", "SOURCE_CONTROL", "OTHER" ],
            "symbolDocs" : {
              "AUDIT" : "Auditing system or audit logs",
              "DATABASE" : "Database, e.g. GRANTS table",
              "FILE_SYSTEM" : "File system, e.g. file/directory owner",
              "ISSUE_TRACKING_SYSTEM" : "Issue tracking system, e.g. Jira",
              "MANUAL" : "Manually provided by a user",
              "OTHER" : "Other sources",
              "SERVICE" : "Other ownership-like service, e.g. Nuage, ACL service etc",
              "SOURCE_CONTROL" : "SCM system, e.g. GIT, SVN"
            }
          },
          "doc" : "The type of the source"
        }, {
          "name" : "url",
          "type" : "string",
          "doc" : "A reference URL for the source",
          "optional" : true
        } ]
      },
      "doc" : "Source information for the ownership",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "Ownership",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information of an entity.",
    "fields" : [ {
      "name" : "owners",
      "type" : {
        "type" : "array",
        "items" : "Owner"
      },
      "doc" : "List of owners of the entity."
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data.",
      "default" : {
        "actor" : "urn:li:corpuser:unknown",
        "time" : 0
      }
    } ],
    "Aspect" : {
      "name" : "ownership"
    }
  }, "com.linkedin.common.OwnershipSource", "com.linkedin.common.OwnershipSourceType", "com.linkedin.common.OwnershipType", {
    "type" : "record",
    "name" : "Status",
    "namespace" : "com.linkedin.common",
    "doc" : "The status metadata of an entity, e.g. dataset, metric, feature, etc.",
    "fields" : [ {
      "name" : "removed",
      "type" : "boolean",
      "doc" : "whether the entity is removed or not",
      "default" : false,
      "Searchable" : {
        "fieldType" : "BOOLEAN"
      }
    } ],
    "Aspect" : {
      "name" : "status"
    }
  }, "com.linkedin.common.Time", "com.linkedin.common.Urn", {
    "type" : "record",
    "name" : "GlossaryNode",
    "namespace" : "com.linkedin.glossary",
    "doc" : "Metadata for a business node",
    "fields" : [ {
      "name" : "urn",
      "type" : "com.linkedin.common.GlossaryNodeUrn",
      "doc" : "Business node urn"
    }, {
      "name" : "glossaryNodeInfo",
      "type" : {
        "type" : "record",
        "name" : "GlossaryNodeInfo",
        "doc" : "Properties associated with a GlossaryNode",
        "fields" : [ {
          "name" : "definition",
          "type" : "string",
          "doc" : "Definition of business node",
          "Searchable" : { }
        }, {
          "name" : "parentNode",
          "type" : "com.linkedin.common.GlossaryNodeUrn",
          "doc" : "Parent node of the glossary term",
          "optional" : true
        } ],
        "Aspect" : {
          "name" : "glossaryNodeInfo"
        }
      },
      "doc" : "Business node info",
      "optional" : true
    }, {
      "name" : "ownership",
      "type" : "com.linkedin.common.Ownership",
      "doc" : "Ownership",
      "optional" : true
    } ]
  }, "com.linkedin.glossary.GlossaryNodeInfo", {
    "type" : "record",
    "name" : "GlossaryNodeKey",
    "namespace" : "com.linkedin.glossary",
    "doc" : "Key for GlossaryNode resource",
    "fields" : [ {
      "name" : "name",
      "type" : "string",
      "validate" : {
        "strlen" : {
          "max" : 20,
          "min" : 1
        }
      }
    } ]
  }, {
    "type" : "typeref",
    "name" : "GlossaryNodeAspect",
    "namespace" : "com.linkedin.metadata.aspect",
    "doc" : "A union of all supported metadata aspects for a GlossaryNode",
    "ref" : [ {
      "type" : "record",
      "name" : "GlossaryNodeKey",
      "namespace" : "com.linkedin.metadata.key",
      "doc" : "Key for a GlossaryNode",
      "fields" : [ {
        "name" : "name",
        "type" : "string",
        "Searchable" : {
          "enableAutocomplete" : true,
          "fieldType" : "TEXT_PARTIAL"
        }
      } ],
      "Aspect" : {
        "name" : "glossaryNodeKey"
      }
    }, "com.linkedin.glossary.GlossaryNodeInfo", "com.linkedin.common.Ownership", "com.linkedin.common.Status" ]
  }, "com.linkedin.metadata.key.GlossaryNodeKey", {
    "type" : "record",
    "name" : "AggregationMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "name",
      "type" : "string",
      "doc" : "The name of the aggregation, e.g, platform, origin"
    }, {
      "name" : "aggregations",
      "type" : {
        "type" : "map",
        "values" : "long"
      },
      "doc" : "List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc"
    } ]
  }, {
    "type" : "record",
    "name" : "AutoCompleteResult",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the auto complete result",
    "fields" : [ {
      "name" : "query",
      "type" : "string",
      "doc" : "The original chars typed by user"
    }, {
      "name" : "suggestions",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "A list of typeahead suggestions"
    } ]
  }, {
    "type" : "enum",
    "name" : "Condition",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The matching condition in a filter criterion",
    "symbols" : [ "CONTAIN", "END_WITH", "EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "START_WITH" ],
    "symbolDocs" : {
      "CONTAIN" : "Represent the relation: String field contains value, e.g. name contains Profile",
      "END_WITH" : "Represent the relation: String field ends with value, e.g. name ends with Event",
      "EQUAL" : "Represent the relation: field = value, e.g. platform = hdfs",
      "GREATER_THAN" : "Represent the relation greater than, e.g. ownerCount > 5",
      "GREATER_THAN_OR_EQUAL_TO" : "Represent the relation greater than or equal to, e.g. ownerCount >= 5",
      "LESS_THAN" : "Represent the relation less than, e.g. ownerCount < 3",
      "LESS_THAN_OR_EQUAL_TO" : "Represent the relation less than or equal to, e.g. ownerCount <= 3",
      "START_WITH" : "Represent the relation: String field starts with value, e.g. name starts with PageView"
    }
  }, {
    "type" : "record",
    "name" : "Criterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "A criterion for matching a field with given value",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that the criterion refers to"
    }, {
      "name" : "value",
      "type" : "string",
      "doc" : "The value of the intended field"
    }, {
      "name" : "condition",
      "type" : "Condition",
      "doc" : "The condition for the criterion, e.g. EQUAL, START_WITH",
      "default" : "EQUAL"
    } ]
  }, {
    "type" : "record",
    "name" : "Filter",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The filter for finding an record or a collection of records",
    "fields" : [ {
      "name" : "criteria",
      "type" : {
        "type" : "array",
        "items" : "Criterion"
      },
      "doc" : "A list of criteria the filter applies to the query"
    } ]
  }, {
    "type" : "record",
    "name" : "MatchMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "matchedFields",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "MatchedField",
          "fields" : [ {
            "name" : "name",
            "type" : "string",
            "doc" : "Matched field name"
          }, {
            "name" : "value",
            "type" : "string",
            "doc" : "Matched field value"
          } ]
        }
      },
      "doc" : "Matched field name and values"
    } ]
  }, "com.linkedin.metadata.query.MatchedField", {
    "type" : "record",
    "name" : "SearchResultMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the search result",
    "fields" : [ {
      "name" : "searchResultMetadatas",
      "type" : {
        "type" : "array",
        "items" : "AggregationMetadata"
      },
      "doc" : "A list of search result metadata such as aggregations"
    }, {
      "name" : "urns",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.Urn"
      },
      "doc" : "A list of urns corresponding to search documents (in order) as returned by the search index"
    }, {
      "name" : "matches",
      "type" : {
        "type" : "array",
        "items" : "MatchMetadata"
      },
      "doc" : "A list of match metadata for each search result, containing the list of fields in the search document that matched the query",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "SortCriterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "Sort order along with the field to sort it on, to be applied to the results.",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that sorting has to be applied to"
    }, {
      "name" : "order",
      "type" : {
        "type" : "enum",
        "name" : "SortOrder",
        "doc" : "The order used to sort the results",
        "symbols" : [ "ASCENDING", "DESCENDING" ],
        "symbolDocs" : {
          "ASCENDING" : "If results need to be sorted in ascending order",
          "DESCENDING" : "If results need to be sorted in descending order"
        }
      },
      "doc" : "The order to sort the results i.e. ASCENDING or DESCENDING"
    } ]
  }, "com.linkedin.metadata.query.SortOrder", {
    "type" : "record",
    "name" : "BackfillResult",
    "namespace" : "com.linkedin.metadata.restli",
    "doc" : "The model for the result of a backfill",
    "fields" : [ {
      "name" : "entities",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "record",
          "name" : "BackfillResultEntity",
          "fields" : [ {
            "name" : "urn",
            "type" : "com.linkedin.common.Urn",
            "doc" : "Urn of the backfilled entity"
          }, {
            "name" : "aspects",
            "type" : {
              "type" : "array",
              "items" : "string"
            },
            "doc" : "List of the aspects backfilled for the entity"
          } ]
        }
      },
      "doc" : "List of backfilled entities"
    } ]
  }, "com.linkedin.metadata.restli.BackfillResultEntity", {
    "type" : "record",
    "name" : "GlossaryNodeSnapshot",
    "namespace" : "com.linkedin.metadata.snapshot",
    "doc" : "A metadata snapshot for a specific GlossaryNode entity.",
    "fields" : [ {
      "name" : "urn",
      "type" : "com.linkedin.common.GlossaryNodeUrn",
      "doc" : "URN for the entity the metadata snapshot is associated with."
    }, {
      "name" : "aspects",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.metadata.aspect.GlossaryNodeAspect"
      },
      "doc" : "The list of metadata aspects associated with the GlossaryNode. Depending on the use case, this can either be all, or a selection, of supported aspects."
    } ],
    "Entity" : {
      "keyAspect" : "glossaryNodeKey",
      "name" : "glossaryNode"
    }
  }, {
    "type" : "record",
    "name" : "EmptyRecord",
    "namespace" : "com.linkedin.restli.common",
    "doc" : "An literally empty record.  Intended as a marker to indicate the absence of content where a record type is required.  If used the underlying DataMap *must* be empty, EmptyRecordValidator is provided to help enforce this.  For example,  CreateRequest extends Request<EmptyRecord> to indicate it has no response body.   Also, a ComplexKeyResource implementation that has no ParamKey should have a signature like XyzResource implements ComplexKeyResource<XyzKey, EmptyRecord, Xyz>.",
    "fields" : [ ],
    "validate" : {
      "com.linkedin.restli.common.EmptyRecordValidator" : { }
    }
  } ],
  "schema" : {
    "annotations" : {
      "deprecated" : { }
    },
    "name" : "glossaryNodes",
    "namespace" : "com.linkedin.glossary",
    "path" : "/glossaryNodes",
    "schema" : "com.linkedin.glossary.GlossaryNode",
    "doc" : "Deprecated! Use {@link EntityResource} instead.\n\ngenerated from: com.linkedin.metadata.resources.glossary.GlossaryNodes",
    "collection" : {
      "identifier" : {
        "name" : "glossaryNode",
        "type" : "com.linkedin.glossary.GlossaryNodeKey",
        "params" : "com.linkedin.restli.common.EmptyRecord"
      },
      "supports" : [ "batch_get", "get", "get_all" ],
      "methods" : [ {
        "method" : "get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ]
      }, {
        "method" : "batch_get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ]
      }, {
        "method" : "get_all",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "sort",
          "type" : "com.linkedin.metadata.query.SortCriterion",
          "optional" : true
        } ],
        "pagingSupported" : true
      } ],
      "finders" : [ {
        "name" : "search",
        "parameters" : [ {
          "name" : "input",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "sort",
          "type" : "com.linkedin.metadata.query.SortCriterion",
          "optional" : true
        } ],
        "metadata" : {
          "type" : "com.linkedin.metadata.query.SearchResultMetadata"
        },
        "pagingSupported" : true
      } ],
      "actions" : [ {
        "name" : "autocomplete",
        "parameters" : [ {
          "name" : "query",
          "type" : "string"
        }, {
          "name" : "field",
          "type" : "string"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter"
        }, {
          "name" : "limit",
          "type" : "int"
        } ],
        "returns" : "com.linkedin.metadata.query.AutoCompleteResult"
      }, {
        "name" : "backfill",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.metadata.restli.BackfillResult"
      }, {
        "name" : "getSnapshot",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.metadata.snapshot.GlossaryNodeSnapshot"
      }, {
        "name" : "ingest",
        "parameters" : [ {
          "name" : "snapshot",
          "type" : "com.linkedin.metadata.snapshot.GlossaryNodeSnapshot"
        } ]
      } ],
      "entity" : {
        "path" : "/glossaryNodes/{glossaryNode}"
      }
    }
  }
}